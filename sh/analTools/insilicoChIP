#!/bin/sh
#$ -S /bin/sh

# 入力ファイルの遺伝子名を Bed に変換する
function geneToBed () {  # $1 = 入力 Bed ファイル名  $2 = Genome  $3 = distanceUp  $4 = distanceDown
  inGene="$1"
  genomeForGeneToBed=$2
  upBp=$3
  dnBp=$4
  tssList="$pd/lib/TSS/uniqueTSS.$genomeForGeneToBed.bed"
  cat $tssList| awk -v inGene="$inGene" -v upBp=$upBp -v dnBp=$dnBp '
  BEGIN {
    while ((getline < inGene) > 0) {
      gsub(/[^a-zA-Z0-9\t_\n]/, "_", $1)
      g[tolower($1)]++
    }
    close(inGene)
  } {
    gene = $4
    gsub(/[^a-zA-Z0-9\t_\n]/, "_", $4)
    if (g[tolower($4)] > 0) {
      beg = ($5 == "+")? $2 - upBp : $3 - dnBp
      end = ($5 == "+")? $2 + dnBp : $3 + upBp
      if (beg < 1) beg = 1
      printf "%s\t%s\t%s\t%s\n", $1, beg, end, gene
    }
  }'
}


# 変数宣言
hed="Search for proteins significantly bound to your data."
srxUrl="http://chip-atlas.org/view?id="
pd="chipatlas"

inBedB="-"
permTime="10"
distanceDown="5000"
distanceUp="5000"
descriptionA="Mydata"
descriptionB="Comparison"
antigenClass="TFs and others"
cellClass="All cell types"
threshold="10"  # 05 / 10 / 20 / 50

expL="$pd/lib/assembled_list/experimentList.tab"
filL="$pd/lib/assembled_list/fileList.tab"
shufN=1
ff=0
vv=0
oo=0
Rr=0
title=0

# パラメータの処理
while getopts a:b:p:d:u:T:A:B:P:C:Q:hfvoR option
do
  case "$option" in
    h)
      echo -e "
========================================================================================================================================
                                                            insilicoChIP
========================================================================================================================================

このコマンドは与えられた BED ファイル、または遺伝子リストに対し、結合が enrichment するタンパク質を返す。

【基本的な使い方】
  ログインノード
    insilicoChIP "$'\e[31m''-a A.txt'$'\e[m' "(-b B.txt)" $'\e[32m''TYPE'$'\e[m' $'\e[35m''GENOME'$'\e[m' $'\e[33m''path/to/FILENMAE'$'\e[m'"
    
  qsub モード
    qsub -o /dev/null -e /dev/null -l short bin/insilicoChIP "$'\e[31m''-a A.txt'$'\e[m' "(-b B.txt)" $'\e[32m''TYPE'$'\e[m' $'\e[35m''GENOME'$'\e[m' $'\e[33m''path/to/FILENMAE'$'\e[m'"
  
  "$'\e[31m''A.txt    '$'\e[m'":  BED ファイル、または遺伝子リスト
  "$'\e[32m''TYPE     '$'\e[m'":  bed または gene
  "$'\e[35m''GENOME   '$'\e[m'":  hg19, mm9 など
  "$'\e[33m''FILENMAE '$'\e[m'":  FILENAME.html と FILENAME.tsv が作られる

  -----------------------------------------------------------------------------------------------------------------------------
   TYPE    -a       -b       目的                                       例
  -----------------------------------------------------------------------------------------------------------------------------
   bed     A.bed    NONE     A.bed vs A の random permutation           insilicoChIP -a A.bed "$'\e[32m''bed'$'\e[m' $'\e[35m''hg19'$'\e[m' $'\e[33m''path/to/hoge'$'\e[m'"
   bed     A.bed    B.bed    A.bed vs B.bed                             insilicoChIP -a A.bed -b B.bed "$'\e[32m''bed'$'\e[m' $'\e[35m''hg19'$'\e[m' $'\e[33m''path/to/hoge'$'\e[m'"
   gene    A.txt    NONE     A.txt vs A 以外の refSeq coding genes      insilicoChIP -a A.txt "$'\e[32m''gene'$'\e[m' $'\e[35m''hg19'$'\e[m' $'\e[33m''path/to/hoge'$'\e[m'"
   gene    A.txt    B.txt    A.txt vs B.txt                             insilicoChIP -a A.txt -b B.txt "$'\e[32m''gene'$'\e[m' $'\e[35m''hg19'$'\e[m' $'\e[33m''path/to/hoge'$'\e[m'"
  -----------------------------------------------------------------------------------------------------------------------------


【オプション】
  "$'\e[32m''General'$'\e[m'"
    -P    Antigen クラス (defalt = \"TFs and others\")
            例) -P \"RNA polymerase\"
    
    -C    Cell type クラス (defalt = \"All cell types\")
            例) -C \"Blood\"
        
    -Q    q-Val threshold [05/10/20/50] (defalt = 10)
            例) -Q 20
    
    -A    A.txt のタイトル (defalt = \"Mydata\")
            例) -A \"Oct4 ChIP\"
    
    -B    B.txt のタイトル (defalt = \"Comparison\")
            例) -B \"Sox2 ChIP\"
    
    -T    タイトル (defalt = \"title_A vs title_B\")
            例) -T \"Oct4 ChIP vs Sox2 ChIP\"
            
    -v    B.txt から A.txt を除去する。
            A.txt = (a, b, c, d)
            B.txt = (a, b, c, d, e, f, g) => (e, f, g)
            
    -o    A.txt との overlap を BED として書き出す。
            path/to/FILENMAE_Overlap.bed と  path/to/FILENMAE_Overlap.bb ができる。さらに、
            path/to/FILENMAE_BED デイレクトリ配下に、SRX ごとに分けた BED ファイルができる。
            
    -R    P-val の計算に Rfisher を使用するため、爆速になる。
            2017.04.05 に気づいたが、Rfisher でも 1E-324 まで計算できることが判明。
            特別な理由がない限り、このオプションを用いた方が良い。
            
            
  "$'\e[32m''TYPE = bed'$'\e[m'" の場合のみ
    -p    Random permutation の回数 (defalt = 10)
          -b が指定されているときは無効になる
            例) -p 100
            
    -f    Random permutation の回数で割らずに p-val を求める。
          計算は遅くなるが、正確な p-Val や Fold enrichment を求めることができる。
            
            
  "$'\e[32m''TYPE = gene'$'\e[m'" の場合のみ
    -u    TSS の上流 bp (defalt = 5000)
            例) -u 10000
    
    -d    TSS の下流 bp (defalt = 5000)
            例) -d 2000


"
    exit 0
    ;;
    
    a) inBedA="$OPTARG";;
    b) inBedB="$OPTARG";;
    p) permTime="$OPTARG";;
    d) distanceDown="$OPTARG";;
    u) distanceUp="$OPTARG";;
    T) title="$OPTARG";;
    A) descriptionA="$OPTARG";;
    B) descriptionB="$OPTARG";;
    P) antigenClass="$OPTARG";;
    C) cellClass="$OPTARG";;
    Q) threshold="$OPTARG";;
    f) ff=1;;
    v) vv=1;;
    o) oo=1;;
    R) Rr=1;;
  esac
done

# オプション解析終了後に不要となったオプション部分を shift コマンドで切り捨てる
shift `expr $OPTIND - 1`

typeA="$1"    # bed / gene
genome="$2"
bn="$3"
outTsv="$bn".tsv
outHtml="$bn".html
bedA="$bn".bedA
bedB="$bn".bedB
tmpF="$bn.tmpForinsilicoChIP"
if [ "$title" = "0" ]; then
  title="$descriptionA vs $descriptionB"
fi
# TypeB の設定
case $typeA in
  "bed") 
    case "$inBedB" in 
      "-" ) typeB="rnd";;
       *  ) typeB="bed";;
    esac
    ;;
  "gene")
    case "$inBedB" in 
      "-" ) typeB="refseq";;
       *  ) typeB="userlist";;
    esac
    ;;
esac

# Type 別に、入力ファイルを整形
case $typeA in
  "bed")  # TypeA = BED の場合、モチーフは BED に、BED はそのまま。
    cat "$inBedA" > "$bedA"
    case $typeB in
      "rnd")  # TypeB = random の場合、bedtools shuffle を行う
        for i in `seq $permTime`; do
          chipatlas/bin/bedtools-2.17.0/bin/shuffleBed -i "$bedA" -g "$pd/lib/genome_size/$genome.chrom.sizes"
        done > "$bedB"
        if [ $ff -eq 0 ]; then
          shufN=$permTime
        fi
        ;;
      "bed")  # TypeB = BED の場合
        case $vv in
          "0") # -v の指定がない場合、BED はそのまま。
            cat "$inBedB" > "$bedB"
            ;;
          "1") # -v が指定された場合、B.bed から A.bed の要素を除去する。
            cat "$inBedB"| awk -v inBedA="$inBedA" '
            BEGIN {
              while ((getline < inBedA) > 0) a[$1,$2,$3]++
            } {
              if (a[$1,$2,$3] + 0 < 1) print
            }' > "$bedB"
            ;;
        esac
        ;;
    esac
    ;;
  "gene")  # TypeA = gene の場合、geneA を BED に変換
    geneToBed "$inBedA" $genome $distanceUp $distanceDown > "$bedA"
    case $typeB in
      "refseq")  # TypeB = RefSeq の場合、geneA 以外の遺伝子を BED に変換
        cat "$pd/lib/TSS/uniqueTSS.$genome.bed"| awk -v bedA="$inBedA" '
        BEGIN {
          while ((getline < bedA) > 0) g[$1]++
        } {
          if (g[$4] + 0 < 1) print $4
        }' > "$bn".inBedB
        geneToBed "$bn".inBedB $genome $distanceUp $distanceDown > "$bedB"
        rm "$bn".inBedB
        ;;
      "userlist")  # TypeB = userGenes の場合
        case $vv in
          "0") # -v の指定がない場合、そのまま BED に変換。
            geneToBed "$inBedB" $genome $distanceUp $distanceDown > "$bedB"
            ;;
          "1") # -v が指定された場合、B.txt から A.txt の要素を除去する。
            cat "$inBedB"| awk -v inBedA="$inBedA" '
            BEGIN {
              while ((getline < inBedA) > 0) a[$0]++
            } {
              if (a[$0] + 0 < 1) print
            }' > "$bn".inBedB
            geneToBed "$bn".inBedB $genome $distanceUp $distanceDown > "$bedB"
            rm "$bn".inBedB
            ;;
        esac
        ;;
    esac
    ;;
esac

wclA=`cat "$bedA"| wc -l`
wclB=`cat "$bedB"| wc -l`


# ライブラリファイルの選択
bedL=`cat $filL| awk -F '\t' -v genome="$genome" -v antigenClass="$antigenClass" -v cellClass="$cellClass" -v threshold="$threshold" -v pd="$pd" '{
  if ($2 == genome && $3 == antigenClass && $5 == cellClass && $4$6 == "--" && $7 == threshold) {
    printf "%s/lib/inSilicoChIP/results/%s/public/%s.bed", pd, genome, $1
  }
}'`   # chipatlas/lib/inSilicoChIP/results/mm9/public/Oth.PSC.05.AllAg.AllCell.bed


# 入力 Bed ファイルをソート
{
  cut -f1-3 "$bedA"| awk -F '\t' '{print $0 "\tA"}'
  cut -f1-3 "$bedB"| awk -F '\t' '{print $0 "\tB"}'
}| tr -d '\015'| awk '{print $0 "\t" NR}'| bin/qsortBed -t "tmp/$RANDOM$RANDOM$RANDOM$JOB_ID" > "$tmpF"
#  chr1    3021366 3021399 ERX132628       chr1    3020993 3021399 B       5791830


# bedtools2
for bedL in `ls $bedL.*`; do
  awk '{x[$4]++} END {for (i in x) print i "\t" x[i]}' $bedL >> "$tmpF"3 &
  software/bedtools2/bin/bedtools intersect -sorted -a $bedL -b "$tmpF" -wb >> "$tmpF"2
done

# -o が指定された場合、bedA と overlap する箇所を BED ファイルとして出力する。
if [ $oo -eq 1 ]; then
  rm -rf "$bn""_BED"
  mkdir "$bn""_BED"
  ovlpBed="$bn""_Overlap"
 cat "$tmpF"2| awk -F '\t' -v outDir="$bn""_BED" -v expL="$expL" -v typeA="$typeA" '
  BEGIN {
    while ((getline < expL) > 0) p[$1] = $4
    if (typeA == "gene") {
      while ((getline < "'$bedA'") > 0) g[$1,$2,$3] = g[$1,$2,$3] "," $4
      for (l in g) sub(",", "", g[l])
    }
  } {
    if ($8 == "A") {
      i++
      outBed[$4] = outDir "/" $4 ".bed"
      str = $4
      if (typeA == "gene") str = str "_" g[$5, $6, $7]
      x[$4] = x[$4] sprintf("%s\t%s\t%s\t%s\n", $5, $6, $7, p[$4]"_@"str)
      if (i == 100000) {
        i = 0             # メモリオーバー と過剰な I/O 負荷を防ぐため、10 万行ごとに書き出し
        for (srx in x) {
          printf x[srx] >> outBed[srx]
          close(outBed[srx])
        }
        delete x
      }
    }
  } END {
    for (srx in x) {
      printf x[srx] >> outBed[srx]
      close(outBed[srx])
    }
  }'
  cat "$bn""_BED"/*bed| sort -k1,1 -k2,2n| uniq| tr ' ' '_' > "$ovlpBed"".bed"
  $pd/bin/bedToBigBed -type=bed4 "$ovlpBed"".bed" "$pd/lib/genome_size/$genome.chrom.sizes" "$ovlpBed"".bb"
fi


# -R オプションによって、Fisher 検定の方法を変える。
function fisheR() {
  if [ $Rr = 0 ]; then  # -R 指定なし => 自作の fisher
    cat $1| awk '{
      print "echo " $0 " `bin/fisher -p " $2 " " $3 " " $4 " " $5 "`"
    }'| sh 2>/dev/null| tr ' ' '\t'
  else                  # -R 指定あり => Rfisher
    cat $1 > "$tmpF"4
    bin/Rfisher -f "$tmpF"4 -k2
    rm "$tmpF"4
  fi
}

# Fisher 検定を行い、TSV と HTML を作成
cat "$tmpF"2| awk -F '\t' -v wclA=$wclA -v wclB=$wclB -v shufN=$shufN '{  # カウント
  if(NR % 1000000 == 0) delete x
  if (!x[$4,$9]++) {
    if ($8 == "A") a[$4]++
    else           b[$4]++
  }
  SRX[$4]++
} END {
  for (srx in SRX) {
    printf "%s\t%d\t%d\t%d\t%d\n", srx, a[srx], wclA - a[srx], int(b[srx] / shufN + 0.5), wclB / shufN -int(b[srx] / shufN + 0.5)
  }
}'| fisheR| awk -F '\t' '{    # Fisher 検定
  for (i=1; i<NF; i++) printf "%s\t", $i
  if ($NF == 0) print "-324"
  else          print log($NF)/log(10)
}'| sort -k6n| bin/qval -lL -k6| awk -F '\t' -v expL=$expL '  # Fold enrichment の計算
BEGIN {
  while((getline < expL) > 0) a[$1] = $3 "\t" $4 "\t" $5 "\t" $6
} {
  if (($2+$3)*$4 == 0) FE = "inf"
  else                 FE = ($2/($2+$3))/($4/($4+$5))  # Fold enrichment = (a/ac)/(b/bd)
  printf "%s\t%s\t%s/%s\t%s/%s\t%s\t%s\t%s\n", $1, a[$1], $2, $2+$3, $4, $4+$5, $6, $7, FE
}'| sort -t $'\t' -k8n -k10nr| awk -F '\t' -v tmp="$tmpF"3 '  # 総ピーク数
BEGIN {
  while ((getline < tmp) > 0) peakN[$1] += $2
} {
  if ($2$4 !~ "No description" && $2$4 !~ "Unclassified") {
    for (i=1; i<=5; i++) printf "%s\t", $i
    printf "%d\t", peakN[$1]
    for (i=6; i<=NF; i++) printf "%s\t", $i
    printf "\n"
  }
}'| tee "$outTsv"| awk -F '\t' -v descriptionA="$descriptionA" -v descriptionB="$descriptionB" -v hed="$hed" -v title="$title" -v wabiID="$wabiID" -v srxUrl="$srxUrl" '  # html に変換
BEGIN {
  while ((getline < "chipatlas/sh/analTools/wabi/btbpToHtml.txt") > 0) {
    gsub("___Title___", title, $0)
    gsub("___Targets___", descriptionA, $0)
    gsub("___References___", descriptionB, $0)
    gsub("___Header___", hed, $0)
    gsub("___Caption___", title, $0)
    gsub("___WABIid___", wabiID, $0)
    print
  }
} {
  print "<tr>"
  print "<td title=\"Open this Info...\"><a target=\"_blank\" style=\"text-decoration: none\" href=\"" srxUrl $1 "\">" $1 "</a></td>"
  for (i=2; i<=5; i++) print "<td>" $i "</td>"
  for (i=6; i<=8; i++) printf "<td align=\"right\">%s</td>\n", $i
  for (i=9; i<=10; i++) printf "<td align=\"right\">%.1f</td>\n", $i
  printf "<td align=\"right\">%s</td>\n", ($11 == "inf")? 99999 : sprintf("%.2f", $11)
  printf "<td>%s</td>\n", ($11 > 1 || $11 == "inf")? "TRUE" : "FALSE"
  print "</tr>"
} END {
  print "</tbody>"
  print "</table>"
}' > "$outHtml"



rm -f $tmpF "$tmpF"2 "$tmpF"3 "$bedA" "$bedB"

#       ある SRX と重なる   重ならない
# bedA              a         c       a+c = bedA の行数 (= wclA)
# bedB              b         d       b+d = bedB の行数 (= wclB)

# Fisher a b c d

# SRX499128   TFs and others    Pou5f1    Pluripotent stem cell   EpiLC   2453   5535/18356    1801/2623   -310.382    -307.491     0.439
# SRX         抗原大             抗原小     細胞大                   細胞小   peak数  a / wclA      b / wclB    p-Val     q-Val (BH)   列7,8のオッズ比











